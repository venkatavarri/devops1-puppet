# configuration for the JRuby interpreters
jruby-puppet: {
    # Where the puppet-agent dependency places puppet, facter, etc...
    # Puppet server expects to load Puppet from this location
    ruby-load-path: [
        "/opt/puppetlabs/puppet/lib/ruby/vendor_ruby",
        "/opt/puppetlabs/puppet/cache/lib"
    ]

    # This setting determines where JRuby will look for gems. It is also
    # used by the `puppetserver gem` command line tool.
    gem-home: /opt/puppetlabs/server/data/puppetserver/jruby-gems

    # (optional) path to puppet conf dir; if not specified, will use the puppet default
    master-conf-dir: /etc/puppetlabs/puppet

    # (optional) path to puppet code dir; if not specified, will use
    # /etc/puppetlabs/code
    master-code-dir: /etc/puppetlabs/code

    # (optional) path to puppet var dir; if not specified, will use the puppet default
    master-var-dir: /opt/puppetlabs/server/data/puppetserver

    # (optional) path to puppet run dir; if not specified, will use
    # /var/run/puppetlabs/puppetserver
    master-run-dir: /var/run/puppetlabs/puppetserver

    # (optional) path to puppet log dir; if not specified, will use
    # /var/log/puppetlabs/puppetserver
    master-log-dir: /var/log/puppetlabs/puppetserver

    # (optional) Authorize access to Puppet master endpoints via rules specified
    # in the legacy Puppet auth.conf file (if true or not specified) or via rules
    # specified in the Puppet Server HOCON-formatted auth.conf (if false).
    use-legacy-auth-conf: false
    max-requests-per-instance : 10000
}

# settings related to profiling the puppet Ruby code
profiler: {
    # enable or disable profiling for the Ruby code; defaults to 'false'.
    # note that enabling this setting also requires enabling the 'metrics' service.
    enabled: true
}

pe-puppetserver: {
  puppet-code-repo: puppet-code
}
